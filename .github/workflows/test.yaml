name: Test
on:
  pull_request:
  push:
    branches:
      - "main"

jobs:
  rust-unit-tests:
    name: Run test suites
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run formatter
        run: cargo fmt
        if: ${{ !cancelled() }}

      - name: Run unit tests
        run: cargo test
        if: ${{ !cancelled() }}

      - name: Run clippy
        run: cargo clippy
        if: ${{ !cancelled() }}

  c-unit-tests:
    name: Formatting Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run clang-format style check for C
        uses: jidicula/clang-format-action@v4.14.0
        with:
          clang-format-version: "13"
          check-path: "./c"

  cpp-unit-tests:
    name: Formatting Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run clang-format style check for C++
        uses: jidicula/clang-format-action@v4.14.0
        with:
          clang-format-version: "13"
          check-path: "./cpp"

  rust-build:
    name: Build rust
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run build
        run: cargo build --release
        if: ${{ !cancelled() }}

  cpp-gnu-build:
    name: Build C++ with g++
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build
        run: |
          for file in cpp/*.cc; do
              g++ "$file" -o "${file%.cc}"
          done
  cpp-clang-build:
    name: Build C++ with clang
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build
        run: |
          for file in cpp/*.cc; do
              clang++ "$file" -o "${file%.cc}"
          done

  gcc-build:
    name: Build C with gcc
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build
        run: |
          for file in c/*.c; do
              gcc "$file" -o "${file%.c}"
          done

  clang-build:
    name: Build C with clang
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build
        run: |
          for file in c/*.c; do
              clang "$file" -o "${file%.c}"
          done
