name: Test
on:
  pull_request:
  push:
    branches:
      - "main"

jobs:
  rust-unit-tests:
    name: Run test suites
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run formatter
        run: cargo fmt
        if: ${{ !cancelled() }}

      - name: Run unit tests
        run: cargo test
        if: ${{ !cancelled() }}

      - name: Run clippy
        run: cargo clippy
        if: ${{ !cancelled() }}

  c-unit-tests:
    name: Formatting Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run clang-format style check for C
        uses: jidicula/clang-format-action@v4.14.0
        with:
          clang-format-version: "13"
          check-path: "./c"

  cpp-unit-tests:
    name: Formatting Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run clang-format style check for C++
        uses: jidicula/clang-format-action@v4.14.0
        with:
          clang-format-version: "13"
          check-path: "./cpp"

  rust-build:
    name: Build rust
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run build
        run: cargo build --release
        if: ${{ !cancelled() }}

  cpp-gnu-build:
    name: Build C++ with g++
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build
        run: g++ ./cpp/*.cc

  cpp-clang-build:
    name: Build C++ with clang
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build
        run: clang++ ./cpp/*.cc

  gcc-build:
    name: Build C with gcc
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build
        run: gcc ./c/*.c

  clang-build:
    name: Build C with clang
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build
        run: clang ./c/*.c

  perf-unit-tests:
    name: Test run-perf
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install poetry
        run: pipx install poetry

      - name: Setup poetry
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
          cache: "poetry"

      - name: Install python dependencies
        run: poetry --directory perf install --with dev

      - name: Run python linter
        run: make check-perf
        if: ${{ !cancelled() }}

      - name: Run python formatter
        run: make format-perf
        if: ${{ !cancelled() }}
